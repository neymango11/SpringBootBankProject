# Team Member 2: Account Management & Transactions

## 1. Account Entity Implementation (Account.java)
### Basic Account Information
- Implement account entity with required fields:
  ```java
  @Entity
  @Table(name = "accounts")
  public class Account {
      @Id
      @GeneratedValue(strategy = GenerationType.IDENTITY)
      private Long id;

      @Column(name = "account_number", unique = true, nullable = false)
      private String accountNumber;  // Generated unique number

      @Column(name = "account_type", nullable = false)
      @Enumerated(EnumType.STRING)
      private AccountType accountType;  // CHECKING or SAVINGS

      @Column(nullable = false)
      private BigDecimal balance;

      @Column(name = "account_holder_name", nullable = false)
      private String accountHolderName;

      @Column
      private BigDecimal apy;  // Annual Percentage Yield for savings
  }
  ```

### Account Status & Tracking
- Add status and tracking fields:
  ```java
  @Column(name = "account_status", nullable = false)
  @Enumerated(EnumType.STRING)
  private AccountStatus status;  // ACTIVE, INACTIVE, FROZEN

  @Column(name = "created_at", nullable = false)
  private LocalDateTime createdAt;

  @Column(name = "last_activity_date")
  private LocalDateTime lastActivityDate;

  @Column(name = "minimum_balance")
  private BigDecimal minimumBalance;

  @Column(name = "overdraft_protection")
  private boolean overdraftProtection;
  ```

### Account Relationships
- Implement relationships:
  ```java
  @ManyToOne
  @JoinColumn(name = "user_id", nullable = false)
  private User user;

  @OneToMany(mappedBy = "account", cascade = CascadeType.ALL)
  private List<Transaction> transactions;
  ```

## 2. Account Repository Implementation (AccountRepository.java)
### Basic CRUD Operations
- Create standard repository methods:
  ```java
  @Repository
  public interface AccountRepository extends JpaRepository<Account, Long> {
      Optional<Account> findByAccountNumber(String accountNumber);
      List<Account> findByUserId(Long userId);
      List<Account> findByAccountType(AccountType type);
      boolean existsByAccountNumber(String accountNumber);
  }
  ```

### Custom Queries
- Implement search and filter methods:
  ```java
  @Query("SELECT a FROM Account a WHERE a.balance > :minBalance")
  List<Account> findAccountsAboveBalance(@Param("minBalance") BigDecimal minBalance);

  @Query("SELECT a FROM Account a WHERE a.status = :status")
  List<Account> findByStatus(@Param("status") AccountStatus status);

  @Query("SELECT a FROM Account a WHERE a.user.id = :userId AND a.accountType = :type")
  Optional<Account> findByUserIdAndType(@Param("userId") Long userId, @Param("type") AccountType type);
  ```

## 3. Transaction Entity Implementation (Transaction.java)
### Transaction Details
- Create transaction entity:
  ```java
  @Entity
  @Table(name = "transactions")
  public class Transaction {
      @Id
      @GeneratedValue(strategy = GenerationType.IDENTITY)
      private Long id;

      @ManyToOne
      @JoinColumn(name = "account_id", nullable = false)
      private Account account;

      @Column(nullable = false)
      @Enumerated(EnumType.STRING)
      private TransactionType type;  // DEPOSIT, WITHDRAWAL, TRANSFER

      @Column(nullable = false)
      private BigDecimal amount;

      @Column(name = "transaction_date", nullable = false)
      private LocalDateTime transactionDate;

      @Column
      private String description;

      @Column(name = "reference_number")
      private String referenceNumber;
  }
  ```

### Transaction Status & Tracking
- Add status and tracking fields:
  ```java
  @Column(name = "status", nullable = false)
  @Enumerated(EnumType.STRING)
  private TransactionStatus status;  // PENDING, COMPLETED, FAILED

  @Column(name = "balance_after")
  private BigDecimal balanceAfter;

  @Column(name = "related_transaction_id")
  private Long relatedTransactionId;  // For transfers
  ```

## 4. Transaction Repository Implementation (TransactionRepository.java)
### Basic Operations
- Create standard repository methods:
  ```java
  @Repository
  public interface TransactionRepository extends JpaRepository<Transaction, Long> {
      List<Transaction> findByAccountId(Long accountId);
      List<Transaction> findByAccountIdAndType(Long accountId, TransactionType type);
      Optional<Transaction> findByReferenceNumber(String referenceNumber);
  }
  ```

### Custom Queries
- Implement transaction history and reporting:
  ```java
  @Query("SELECT t FROM Transaction t WHERE t.account.id = :accountId " +
         "AND t.transactionDate BETWEEN :startDate AND :endDate")
  List<Transaction> findTransactionsByDateRange(
      @Param("accountId") Long accountId,
      @Param("startDate") LocalDateTime startDate,
      @Param("endDate") LocalDateTime endDate
  );

  @Query("SELECT SUM(t.amount) FROM Transaction t WHERE t.account.id = :accountId " +
         "AND t.type = :type AND t.status = 'COMPLETED'")
  BigDecimal getTotalTransactionsByType(
      @Param("accountId") Long accountId,
      @Param("type") TransactionType type
  );
  ```

## 5. Account Service Implementation
### Account Management
- Implement account operations:
  ```java
  @Service
  public class AccountService {
      public Account createAccount(User user, AccountType type) {
          Account account = new Account();
          account.setUser(user);
          account.setAccountType(type);
          account.setAccountNumber(generateAccountNumber());
          account.setBalance(BigDecimal.ZERO);
          account.setStatus(AccountStatus.ACTIVE);
          // Set other fields...
          return accountRepository.save(account);
      }

      public Account updateAccountStatus(String accountNumber, AccountStatus status) {
          Account account = accountRepository.findByAccountNumber(accountNumber)
              .orElseThrow(() -> new AccountNotFoundException());
          account.setStatus(status);
          return accountRepository.save(account);
      }
  }
  ```

### Balance Management
- Implement balance operations:
  ```java
  public void updateBalance(String accountNumber, BigDecimal amount) {
      Account account = accountRepository.findByAccountNumber(accountNumber)
          .orElseThrow(() -> new AccountNotFoundException());

      BigDecimal newBalance = account.getBalance().add(amount);
      if (newBalance.compareTo(account.getMinimumBalance()) < 0) {
          throw new InsufficientFundsException();
      }

      account.setBalance(newBalance);
      accountRepository.save(account);
  }
  ```

## 6. Transaction Service Implementation
### Transaction Processing
- Implement transaction operations:
  ```java
  @Service
  public class TransactionService {
      @Transactional
      public Transaction processDeposit(String accountNumber, BigDecimal amount) {
          Account account = accountRepository.findByAccountNumber(accountNumber)
              .orElseThrow(() -> new AccountNotFoundException());

          Transaction transaction = new Transaction();
          transaction.setAccount(account);
          transaction.setType(TransactionType.DEPOSIT);
          transaction.setAmount(amount);
          transaction.setStatus(TransactionStatus.PENDING);

          try {
              updateBalance(accountNumber, amount);
              transaction.setStatus(TransactionStatus.COMPLETED);
          } catch (Exception e) {
              transaction.setStatus(TransactionStatus.FAILED);
              throw e;
          }

          return transactionRepository.save(transaction);
      }
  }
  ```

## 7. Testing Responsibilities
### Unit Tests
- Create test cases for:
  - Account entity validation
  - Transaction entity validation
  - Repository operations
  - Service layer methods
  - Balance calculations
  - Transaction processing

### Integration Tests
- Test integration with:
  - User management
  - Database operations
  - Transaction processing
  - Balance updates
  - Error handling

## 8. Documentation
### Technical Documentation
- Document:
  - Account structure
  - Transaction structure
  - Repository methods
  - Service operations
  - API endpoints

### User Documentation
- Create guides for:
  - Account management
  - Transaction processing
  - Balance inquiries
  - Error handling
  - Troubleshooting

## 9. Integration Points
### With Other Components
- Coordinate with:
  - User management (Team Member 1)
  - Banking operations (Team Member 3)
  - Security system (Team Member 4)
  - CLI interface (Team Member 5)

## 10. Quality Assurance
### Code Quality
- Ensure:
  - Clean code principles
  - Proper error handling
  - Transaction integrity
  - Data consistency
  - Documentation standards

### Testing Coverage
- Maintain:
  - Unit test coverage
  - Integration test coverage
  - Transaction testing
  - Balance verification
  - Error scenario testing